{"class": "go.GraphLinksModel", "nodeDataArray": [{"category": "Task", "text": "Simple Java calculator", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -1, "refs": [], "ctsx": [], "comment": null, "post": "Firstly this is not a homework question. I am practicing my knowledge on java. I figured a good way to do this is to write a simple program without help. Unfortunately, my compiler is telling me errors I don't know how to fix. Without changing much logic and code, could someone kindly point out where some of my errors are? Thanks", "code": ["import java.lang.*;\nimport java.util.*;\n\npublic class Calculator\n{\n    private int solution;\n    private int x;\n    private int y;\n    private char operators;\n\n    public Calculator()\n    {\n        solution = 0;\n        Scanner operators = new Scanner(System.in);\n        Scanner operands = new Scanner(System.in);\n    }\n\n    public int addition(int x, int y)\n    {\n       return x + y;\n    }\n    public int subtraction(int x, int y)\n    {\n       return x - y;\n    }\n    public int multiplication(int x, int y)\n    {    \n       return x * y;\n    }\n    public int division(int x, int y)\n    {\n       solution = x / y;\n       return solution;\n    }\n    public void main (String[] args)\n    {\n      System.out.println(\"What operation? ('+', '-', '*', '/')\"); \n\n      System.out.println(\"Insert 2 numbers to be subtracted\");\n       System.out.println(\"operand 1: \");\n       x = operands;\n       System.out.println(\"operand 2: \");\n       y = operands.next();\n      switch(operators)\n      {\n          case('+'):\n            addition(operands);\n            operands.next();\n            break;\n          case('-'):\n            subtraction(operands);\n            operands.next();\n            break;\n          case('*'):\n            multiplication(operands);\n            operands.next();\n            break;\n          case('/'):\n            division(operands);\n            operands.next();\n            break;\n       }\n  }\n}\n"]}, {"category": "Task", "text": "Calculator", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -2, "refs": [], "ctsx": [], "comment": [], "post": null, "code": "public class Calculator {\n    private int solution;\n    private static int x;\n    private static int y;\n    private char operators;\n    public Calculator() {\n        solution = 0;\n        Scanner operators = new Scanner(System.in);\n        Scanner operands = new Scanner(System.in);\n        \n    }\n    public int addition(int x, int y) {\n        return x + y;\n        \n    }\n    public int subtraction(int x, int y) {\n        return x - y;\n        \n    }\n    public int multiplication(int x, int y) {\n        return x * y;\n        \n    }\n    public int division(int x, int y) {\n        solution = x / y;\n        return solution;\n        \n    }\n    public void calc(int ops) {\n        x = 4;\n        System.out.println(\"operand 2: \");\n        y = 5;\n        switch(ops) {\n            case(1) : System.out.println(addition(x, y));\n            break;\n            case(2) : System.out.println(subtraction(x, y));\n            break;\n            case(3) : System.out.println(multiplication(x, y));\n            break;\n            case(4) : System.out.println(division(x, y));\n            break;\n            \n        }\n    }\n    public static void main(String[]args) {\n        System.out.println(\"What operation? ('+', '-', '*', '/')\");\n        System.out.println(\" Enter 1 for Addition\");\n        System.out.println(\" Enter 2 for Subtraction\");\n        System.out.println(\" Enter 3 for Multiplication\");\n        System.out.println(\" Enter 4 for Division\");\n        Calculator calc = new Calculator();\n        calc.calc(1);\n        \n    }\n}\n"}, {"category": "Task", "text": "Calculator", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -3, "refs": [], "ctsx": [], "comment": [], "post": null, "code": "public Calculator() {\n    solution = 0;\n    Scanner operators = new Scanner(System.in);\n    Scanner operands = new Scanner(System.in);\n    \n}\n"}, {"category": "Task", "text": "addition", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -4, "refs": [], "ctsx": [], "comment": [], "post": null, "code": "public int addition(int x, int y) {\n    return x + y;\n    \n}\n"}, {"category": "Task", "text": "subtraction", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -5, "refs": [], "ctsx": [], "comment": [], "post": null, "code": "public int subtraction(int x, int y) {\n    return x - y;\n    \n}\n"}, {"category": "Task", "text": "multiplication", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -6, "refs": [], "ctsx": [], "comment": [], "post": null, "code": "public int multiplication(int x, int y) {\n    return x * y;\n    \n}\n"}, {"category": "Task", "text": "division", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -7, "refs": [], "ctsx": [], "comment": [], "post": null, "code": "public int division(int x, int y) {\n    solution = x / y;\n    return solution;\n    \n}\n"}, {"category": "Task", "text": "main", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -8, "refs": [], "ctsx": [], "comment": [], "post": null, "code": "public static void main(String[]args) {\n    System.out.println(\"What operation? ('+', '-', '*', '/')\");\n    System.out.println(\" Enter 1 for Addition\");\n    System.out.println(\" Enter 2 for Subtraction\");\n    System.out.println(\" Enter 3 for Multiplication\");\n    System.out.println(\" Enter 4 for Division\");\n    Calculator calc = new Calculator();\n    calc.calc(1);\n    \n}\n}\n"}, {"category": "Task", "text": "calc", "fill": "#ffffff", "stroke": "#000000", "strokeWidth": 1, "key": -9, "refs": [], "ctsx": [], "comment": [], "post": null, "code": "public void calc(int ops) {\n    x = 4;\n    System.out.println(\"operand 2: \");\n    y = 5;\n    switch(ops) {\n        case(1) : System.out.println(addition(x, y));\n        break;\n        case(2) : System.out.println(subtraction(x, y));\n        break;\n        case(3) : System.out.println(multiplication(x, y));\n        break;\n        case(4) : System.out.println(division(x, y));\n        break;\n        \n    }\n}\n"}], "linkDataArray": [{"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -1, "to": -2, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -2, "to": -3, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -2, "to": -4, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -2, "to": -5, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -2, "to": -6, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -2, "to": -7, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -2, "to": -8, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -2, "to": -9, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -8, "to": -4, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -8, "to": -5, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -8, "to": -6, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -8, "to": -7, "refs": [], "ctsx": [], "comment": "null"}, {"category": "ConsistsOf", "text": "consists of", "routing": {"yb": "Normal", "oE": 1}, "from": -8, "to": -9, "refs": [], "ctsx": [], "comment": "null"}]}